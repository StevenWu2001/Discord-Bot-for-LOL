{"version":3,"file":"index.umd.js","sources":["../index.ts"],"sourcesContent":["interface Params<T, R> {\n  /**\n   * The input collection that will feed the tasks\n   */\n  collection: T[];\n  /**\n   * A function that takes an item from the collection and returns a result\n   */\n  task: (t: T, index: number) => Promise<R>;\n  /**\n   * The max number of concurrent tasks. If not provided, all tasks are ran at\n   * once\n   */\n  maxConcurrency?: number;\n}\n\n/**\n * Like `Promise.all` but you can specify how many concurrent tasks you want at once.\n */\nasync function pool<T, R>({\n  collection,\n  task,\n  maxConcurrency,\n}: Params<T, R>): Promise<R[]> {\n  if (!maxConcurrency) {\n    return Promise.all(collection.map((item, i) => task(item, i)));\n  }\n\n  if (!collection.length) {\n    return [];\n  }\n\n  const results: Array<[R, number]> = [];\n  const mutableCollection = collection\n    .slice()\n    .map((t, i) => [t, i] as [T, number]);\n\n  let available = maxConcurrency;\n  let done = false;\n  let globalResolve!: () => void;\n  let globalReject!: (err: Error) => void;\n  const finalPromise = new Promise<void>((resolve, reject) => {\n    globalResolve = resolve;\n    globalReject = reject;\n  });\n\n  const listeners = new Set<() => void>();\n  function notify() {\n    for (const listener of listeners) {\n      listener();\n    }\n  }\n  function ready() {\n    return new Promise<void>((resolve) => {\n      const listener = () => {\n        if (done) {\n          listeners.delete(listener);\n          resolve();\n        } else if (available > 0) {\n          listeners.delete(listener);\n          available -= 1;\n          resolve();\n        }\n      };\n\n      listeners.add(listener);\n      notify();\n    });\n  }\n\n  while (true) {\n    const value = mutableCollection.shift();\n    if (!value) break;\n    if (done) break;\n\n    const [t, i] = value;\n\n    await ready();\n\n    task(t, i)\n      .then((r) => {\n        results.push([r, i]);\n        available += 1;\n\n        if (results.length === collection.length) {\n          done = true;\n          globalResolve();\n        }\n      })\n      .catch((e) => {\n        done = true;\n        globalReject(e);\n      })\n      .finally(notify);\n  }\n\n  await finalPromise;\n\n  return results\n    .slice()\n    .sort(([, a], [, b]) => a - b)\n    .map(([r]) => r);\n}\n\nexport default pool;\n"],"names":["pool","collection","task","maxConcurrency","Promise","all","map","item","i","length","results","mutableCollection","slice","t","available","done","globalResolve","globalReject","finalPromise","resolve","reject","listeners","Set","notify","listener","ready","delete","add","value","shift","then","r","push","catch","e","finally","sort","a","b"],"mappings":";;;;;EAgBA;;;EAGA,eAAeA,IAAf,CAA0B;EACxBC,EAAAA,UADwB;EAExBC,EAAAA,IAFwB;EAGxBC,EAAAA;EAHwB,CAA1B;EAKE,MAAI,CAACA,cAAL,EAAqB;EACnB,WAAOC,OAAO,CAACC,GAAR,CAAYJ,UAAU,CAACK,GAAX,CAAe,CAACC,IAAD,EAAOC,CAAP,KAAaN,IAAI,CAACK,IAAD,EAAOC,CAAP,CAAhC,CAAZ,CAAP;EACD;;EAED,MAAI,CAACP,UAAU,CAACQ,MAAhB,EAAwB;EACtB,WAAO,EAAP;EACD;;EAED,QAAMC,OAAO,GAAuB,EAApC;EACA,QAAMC,iBAAiB,GAAGV,UAAU,CACjCW,KADuB,GAEvBN,GAFuB,CAEnB,CAACO,CAAD,EAAIL,CAAJ,KAAU,CAACK,CAAD,EAAIL,CAAJ,CAFS,CAA1B;EAIA,MAAIM,SAAS,GAAGX,cAAhB;EACA,MAAIY,IAAI,GAAG,KAAX;EACA,MAAIC,aAAJ;EACA,MAAIC,YAAJ;EACA,QAAMC,YAAY,GAAG,IAAId,OAAJ,CAAkB,CAACe,OAAD,EAAUC,MAAV;EACrCJ,IAAAA,aAAa,GAAGG,OAAhB;EACAF,IAAAA,YAAY,GAAGG,MAAf;EACD,GAHoB,CAArB;EAKA,QAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;;EACA,WAASC,MAAT;EACE,SAAK,MAAMC,QAAX,IAAuBH,SAAvB,EAAkC;EAChCG,MAAAA,QAAQ;EACT;EACF;;EACD,WAASC,KAAT;EACE,WAAO,IAAIrB,OAAJ,CAAmBe,OAAD;EACvB,YAAMK,QAAQ,GAAG;EACf,YAAIT,IAAJ,EAAU;EACRM,UAAAA,SAAS,CAACK,MAAV,CAAiBF,QAAjB;EACAL,UAAAA,OAAO;EACR,SAHD,MAGO,IAAIL,SAAS,GAAG,CAAhB,EAAmB;EACxBO,UAAAA,SAAS,CAACK,MAAV,CAAiBF,QAAjB;EACAV,UAAAA,SAAS,IAAI,CAAb;EACAK,UAAAA,OAAO;EACR;EACF,OATD;;EAWAE,MAAAA,SAAS,CAACM,GAAV,CAAcH,QAAd;EACAD,MAAAA,MAAM;EACP,KAdM,CAAP;EAeD;;EAED,SAAO,IAAP,EAAa;EACX,UAAMK,KAAK,GAAGjB,iBAAiB,CAACkB,KAAlB,EAAd;EACA,QAAI,CAACD,KAAL,EAAY;EACZ,QAAIb,IAAJ,EAAU;EAEV,UAAM,CAACF,CAAD,EAAIL,CAAJ,IAASoB,KAAf;EAEA,UAAMH,KAAK,EAAX;EAEAvB,IAAAA,IAAI,CAACW,CAAD,EAAIL,CAAJ,CAAJ,CACGsB,IADH,CACSC,CAAD;EACJrB,MAAAA,OAAO,CAACsB,IAAR,CAAa,CAACD,CAAD,EAAIvB,CAAJ,CAAb;EACAM,MAAAA,SAAS,IAAI,CAAb;;EAEA,UAAIJ,OAAO,CAACD,MAAR,KAAmBR,UAAU,CAACQ,MAAlC,EAA0C;EACxCM,QAAAA,IAAI,GAAG,IAAP;EACAC,QAAAA,aAAa;EACd;EACF,KATH,EAUGiB,KAVH,CAUUC,CAAD;EACLnB,MAAAA,IAAI,GAAG,IAAP;EACAE,MAAAA,YAAY,CAACiB,CAAD,CAAZ;EACD,KAbH,EAcGC,OAdH,CAcWZ,MAdX;EAeD;;EAED,QAAML,YAAN;EAEA,SAAOR,OAAO,CACXE,KADI,GAEJwB,IAFI,CAEC,CAAC,GAAGC,CAAH,CAAD,EAAQ,GAAGC,CAAH,CAAR,KAAkBD,CAAC,GAAGC,CAFvB,EAGJhC,GAHI,CAGA,CAAC,CAACyB,CAAD,CAAD,KAASA,CAHT,CAAP;EAID;;;;;;;;"}