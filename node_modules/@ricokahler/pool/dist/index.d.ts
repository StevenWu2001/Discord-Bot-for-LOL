interface Params<T, R> {
    /**
     * The input collection that will feed the tasks
     */
    collection: T[];
    /**
     * A function that takes an item from the collection and returns a result
     */
    task: (t: T, index: number) => Promise<R>;
    /**
     * The max number of concurrent tasks. If not provided, all tasks are ran at
     * once
     */
    maxConcurrency?: number;
}
/**
 * Like `Promise.all` but you can specify how many concurrent tasks you want at once.
 */
declare function pool<T, R>({ collection, task, maxConcurrency, }: Params<T, R>): Promise<R[]>;
export default pool;
